webpackJsonp([41, 135, 136, 313, 314], {1344: function (e, n, t) { 'use strict'; var o = t(1345); n.a = o.a }, 1345: function (e, n, t) { 'use strict'; n.a = {data: function () { return {total: 200, current: 10, perPage: 10, rangeBefore: 3, rangeAfter: 1, order: '', size: '', isSimple: !1, isRounded: !1, prevIcon: 'chevron-left', nextIcon: 'chevron-right'} }} }, 1346: function (e, n, t) { 'use strict'; var o = t(1347); n.a = o.a }, 1347: function (e, n, t) { 'use strict'; n.a = {data: function () { return {current: 10, basicRomanNumeral: ['', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', '', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC', '', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM', '', 'M', 'MM', 'MMM']} }, methods: {convertToRoman: function (e) { var n = this, t = e.toString().split(''), o = t.length - 1; return t.reduce(function (e, t) { var a = n.basicRomanNumeral[+t + 10 * o]; return o -= 1, e + a }, '') }}, watch: {$route: {immediate: !0, handler: function (e, n) { e.hash && (this.current = parseInt(e.hash.replace(/\#page/g, ''))) }}}} }, 1826: function (e, n, t) { 'use strict'; var o = t(1827); t.d(n, 'a', function () { return o.a }), t.d(n, 'b', function () { return o.b }) }, 1827: function (e, n, t) { 'use strict'; t.d(n, 'a', function () { return o }), t.d(n, 'b', function () { return a }); var o = function () { var e = this, n = e.$createElement, t = e._self._c || n; return t('section', [t('b-field', {attrs: {grouped: '', 'group-multiline': ''}}, [t('b-field', {attrs: {label: 'Total'}}, [t('b-input', {attrs: {type: 'number'}, model: {value: e.total, callback: function (n) { e.total = n }, expression: 'total'}})], 1), t('b-field', {attrs: {label: 'Items per page'}}, [t('b-input', {attrs: {type: 'number'}, model: {value: e.perPage, callback: function (n) { e.perPage = n }, expression: 'perPage'}})], 1)], 1), t('b-field', {attrs: {grouped: '', 'group-multiline': ''}}, [t('b-field', {attrs: {label: 'Show buttons before current'}}, [t('b-input', {attrs: {type: 'number', min: '0'}, model: {value: e.rangeBefore, callback: function (n) { e.rangeBefore = n }, expression: 'rangeBefore'}})], 1), t('b-field', {attrs: {label: 'Show buttons after current'}}, [t('b-input', {attrs: {type: 'number', min: '0'}, model: {value: e.rangeAfter, callback: function (n) { e.rangeAfter = n }, expression: 'rangeAfter'}})], 1)], 1), t('b-field', {attrs: {grouped: '', 'group-multiline': ''}}, [t('b-field', {attrs: {label: 'Order'}}, [t('b-select', {model: {value: e.order, callback: function (n) { e.order = n }, expression: 'order'}}, [t('option', {attrs: {value: ''}}, [e._v('default')]), t('option', {attrs: {value: 'is-centered'}}, [e._v('is-centered')]), t('option', {attrs: {value: 'is-right'}}, [e._v('is-right')])])], 1), t('b-field', {attrs: {label: 'Size'}}, [t('b-select', {model: {value: e.size, callback: function (n) { e.size = n }, expression: 'size'}}, [t('option', {attrs: {value: ''}}, [e._v('default')]), t('option', {attrs: {value: 'is-small'}}, [e._v('is-small')]), t('option', {attrs: {value: 'is-medium'}}, [e._v('is-medium')]), t('option', {attrs: {value: 'is-large'}}, [e._v('is-large')])])], 1)], 1), t('b-field', {attrs: {grouped: '', 'group-multiline': ''}}, [t('b-field', {attrs: {label: 'Previous icon'}}, [t('b-select', {model: {value: e.prevIcon, callback: function (n) { e.prevIcon = n }, expression: 'prevIcon'}}, [t('option', {attrs: {value: 'chevron-left'}}, [e._v('Chevron')]), t('option', {attrs: {value: 'arrow-left'}}, [e._v('Arrow')])])], 1), t('b-field', {attrs: {label: 'Next icon'}}, [t('b-select', {model: {value: e.nextIcon, callback: function (n) { e.nextIcon = n }, expression: 'nextIcon'}}, [t('option', {attrs: {value: 'chevron-right'}}, [e._v('Chevron')]), t('option', {attrs: {value: 'arrow-right'}}, [e._v('Arrow')])])], 1)], 1), t('div', {staticClass: 'block'}, [t('b-switch', {model: {value: e.isSimple, callback: function (n) { e.isSimple = n }, expression: 'isSimple'}}, [e._v('Simple')]), t('b-switch', {model: {value: e.isRounded, callback: function (n) { e.isRounded = n }, expression: 'isRounded'}}, [e._v('Rounded')])], 1), t('hr'), t('b-pagination', {attrs: {total: e.total, 'range-before': e.rangeBefore, 'range-after': e.rangeAfter, order: e.order, size: e.size, simple: e.isSimple, rounded: e.isRounded, 'per-page': e.perPage, 'icon-prev': e.prevIcon, 'icon-next': e.nextIcon, 'aria-next-label': 'Next page', 'aria-previous-label': 'Previous page', 'aria-page-label': 'Page', 'aria-current-label': 'Current page'}, model: {value: e.current, callback: function (n) { e.current = n }, expression: 'current'}})], 1) }, a = [] }, 1828: function (e, n, t) { 'use strict'; var o = t(1829); t.d(n, 'a', function () { return o.a }), t.d(n, 'b', function () { return o.b }) }, 1829: function (e, n, t) { 'use strict'; t.d(n, 'a', function () { return o }), t.d(n, 'b', function () { return a }); var o = function () { var e = this, n = e.$createElement, t = e._self._c || n; return t('section', [t('b-pagination', {attrs: {total: 200, 'per-page': 10}, scopedSlots: e._u([{key: 'default', fn: function (n) { return [t('b-pagination-button', {attrs: {page: n.page, id: 'page' + n.page.number, tag: 'router-link', to: '/documentation/pagination#page' + n.page.number}}, [e._v(' ' + e._s(e.convertToRoman(n.page.number)) + ' ')])] }}, {key: 'previous', fn: function (n) { return [t('b-pagination-button', {attrs: {page: n.page, tag: 'router-link', to: '/documentation/pagination#page' + n.page.number}}, [e._v(' Previous ')])] }}, {key: 'next', fn: function (n) { return [t('b-pagination-button', {attrs: {page: n.page, tag: 'router-link', to: '/documentation/pagination#page' + n.page.number}}, [e._v(' Next ')])] }}]), model: {value: e.current, callback: function (n) { e.current = n }, expression: 'current'}})], 1) }, a = [] }, 2206: function (e, n, t) { 'use strict'; var o = t(2207); n.a = o.a }, 2207: function (e, n, t) { 'use strict'; var o = t(433), a = t(434), r = t(435), i = t(2446), l = t.n(i), u = t(436), c = t(2447), s = t.n(c); n.a = {data: function () { return {api: o.default, variables: a.default, ExSimple: r.default, ExSimpleCode: l.a, ExSlot: u.default, ExSlotCode: s.a} }} }, 2444: function (e, n, t) { 'use strict'; var o = t(2445); t.d(n, 'a', function () { return o.a }), t.d(n, 'b', function () { return o.b }) }, 2445: function (e, n, t) { 'use strict'; t.d(n, 'a', function () { return o }), t.d(n, 'b', function () { return a }); var o = function () { var e = this, n = e.$createElement, t = e._self._c || n; return t('div', [t('Example', {attrs: {component: e.ExSimple, code: e.ExSimpleCode}}), t('Example', {attrs: {component: e.ExSlot, code: e.ExSlotCode, title: 'Custom pagination buttons'}}, [t('p', [e._v('You can customize the buttons using '), t('b', [t('code', [e._v('b-pagination-button')])]), e._v(' as scoped slot.')]), t('p', [e._v('For example, you can customize the inner text or use '), t('code', [e._v('router-link')]), e._v(' as tag.')])]), t('ApiView', {attrs: {data: e.api}}), t('VariablesView', {attrs: {data: e.variables}})], 1) }, a = [] }, 2446: function (e, n) { e.exports = '<template>\n    <section>\n        <b-field grouped group-multiline>\n            <b-field label="Total">\n                <b-input type="number" v-model="total"></b-input>\n            </b-field>\n            <b-field label="Items per page">\n                <b-input type="number" v-model="perPage"></b-input>\n            </b-field>\n        </b-field>\n        <b-field grouped group-multiline>\n            <b-field label="Show buttons before current">\n                <b-input type="number" v-model="rangeBefore" min="0"></b-input>\n            </b-field>\n            <b-field label="Show buttons after current">\n                <b-input type="number" v-model="rangeAfter" min="0"></b-input>\n            </b-field>\n        </b-field>\n        <b-field grouped group-multiline>\n            <b-field label="Order">\n                <b-select v-model="order">\n                    <option value="">default</option>\n                    <option value="is-centered">is-centered</option>\n                    <option value="is-right">is-right</option>\n                </b-select>\n            </b-field>\n            <b-field label="Size">\n                <b-select v-model="size">\n                    <option value="">default</option>\n                    <option value="is-small">is-small</option>\n                    <option value="is-medium">is-medium</option>\n                    <option value="is-large">is-large</option>\n                </b-select>\n            </b-field>\n        </b-field>\n        <b-field grouped group-multiline>\n            <b-field label="Previous icon">\n                <b-select v-model="prevIcon">\n                    <option value="chevron-left">Chevron</option>\n                    <option value="arrow-left">Arrow</option>\n                </b-select>\n            </b-field>\n            <b-field label="Next icon">\n                <b-select v-model="nextIcon">\n                    <option value="chevron-right">Chevron</option>\n                    <option value="arrow-right">Arrow</option>\n                </b-select>\n            </b-field>\n        </b-field>\n        <div class="block">\n            <b-switch v-model="isSimple">Simple</b-switch>\n            <b-switch v-model="isRounded">Rounded</b-switch>\n        </div>\n\n        <hr>\n        <b-pagination\n            :total="total"\n            v-model="current"\n            :range-before="rangeBefore"\n            :range-after="rangeAfter"\n            :order="order"\n            :size="size"\n            :simple="isSimple"\n            :rounded="isRounded"\n            :per-page="perPage"\n            :icon-prev="prevIcon"\n            :icon-next="nextIcon"\n            aria-next-label="Next page"\n            aria-previous-label="Previous page"\n            aria-page-label="Page"\n            aria-current-label="Current page">\n        </b-pagination>\n    </section>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                total: 200,\n                current: 10,\n                perPage: 10,\n                rangeBefore: 3,\n                rangeAfter: 1,\n                order: \'\',\n                size: \'\',\n                isSimple: false,\n                isRounded: false,\n                prevIcon: \'chevron-left\',\n                nextIcon: \'chevron-right\'\n            }\n        }\n    }\n<\/script>\n' }, 2447: function (e, n) { e.exports = "<template>\n    <section>\n        <b-pagination\n            :total=\"200\"\n            v-model=\"current\"\n            :per-page=\"10\">\n\n            <template #default=\"props\">\n                <b-pagination-button\n                    :page=\"props.page\"\n                    :id=\"`page${props.page.number}`\"\n                    tag=\"router-link\"\n                    :to=\"`/documentation/pagination#page${props.page.number}`\">\n                    {{ convertToRoman(props.page.number) }}\n                </b-pagination-button>\n            </template>\n\n\n            <template #previous=\"props\">\n                <b-pagination-button\n                    :page=\"props.page\"\n                    tag=\"router-link\"\n                    :to=\"`/documentation/pagination#page${props.page.number}`\">\n                    Previous\n                </b-pagination-button>\n            </template>\n\n            <template #next=\"props\">\n                <b-pagination-button\n                    :page=\"props.page\"\n                    tag=\"router-link\"\n                    :to=\"`/documentation/pagination#page${props.page.number}`\">\n                    Next\n                </b-pagination-button>\n            </template>\n\n        </b-pagination>\n    </section>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                current: 10,\n                basicRomanNumeral: ['',\n                    'I','II','III','IV','V','VI','VII','VIII','IX','',\n                    'X','XX','XXX','XL','L','LX','LXX','LXXX','XC','',\n                    'C','CC','CCC','CD','D','DC','DCC','DCCC','CM','',\n                    'M','MM','MMM'\n                ]\n            }\n        },\n        methods: {\n            convertToRoman(num) {\n                const numArray = num.toString().split('');\n                const base = numArray.length;\n                let count = base-1;\n                const convertedRoman = numArray.reduce((roman, digit) => {\n                    const digitRoman = this.basicRomanNumeral[+digit + count*10];\n                    const result = roman + digitRoman;\n                    count -= 1;\n                    return result;\n                },'');\n                return convertedRoman;\n            }\n        },\n        watch: {\n            $route: {\n                immediate: true,\n                handler(newVal, oldVal) {\n                    if (newVal.hash) {\n                        this.current = parseInt(newVal.hash.replace(/\\#page/g, ''))\n                    }\n                },\n            },\n        }\n    }\n<\/script>\n" }, 433: function (e, n, t) { 'use strict'; Object.defineProperty(n, '__esModule', {value: !0}), n.default = [{title: 'Pagination', props: [{name: '<code>total</code>', description: 'Total count of items', type: 'Number', values: '—', default: '—'}, {name: '<code>per-page</code>', description: 'Items count for each page', type: 'Number', values: '—', default: '<code>20</code>'}, {name: '<code>range-before</code>', description: 'Number of pagination items to show before current page', type: 'Number', values: '—', default: '<code>1</code>'}, {name: '<code>range-after</code>', description: 'Items to paginatation items to show after current page', type: 'Number', values: '—', default: '<code>1</code>'}, {name: '<code>current</code>', description: 'Current page number, use the <code>.sync</code> modifier to make it two-way binding', type: 'Number', values: '—', default: '<code>1</code>'}, {name: '<code>order</code>', description: 'Buttons order, optional', type: 'String', values: '<code>is-centered</code>, <code>is-right</code>', default: '—'}, {name: '<code>size</code>', description: 'Pagination size, optional', type: 'String', values: '<code>is-small</code>, <code>is-medium</code>, <code>is-large</code>', default: '—'}, {name: '<code>simple</code>', description: 'Simpler style', type: 'Boolean', values: '—', default: '<code>false</code>'}, {name: '<code>rounded</code>', description: 'Rounded button styles', type: 'Boolean', values: '—', default: '<code>false</code>'}, {name: '<code>icon-pack</code>', description: 'Icon pack to use', type: 'String', values: '<code>mdi</code>, <code>fa</code>, <code>fas</code>, <code>far</code>, <code>fad</code>, <code>fal</code>', default: '<code>mdi</code>'}, {name: '<code>icon-prev</code>', description: 'Icon to use for previous button', type: 'String', values: '—', default: '<code>chevron-left</code>'}, {name: '<code>icon-next</code>', description: 'Icon to use for next button', type: 'String', values: '—', default: '<code>chevron-right</code>'}, {name: '<code>aria-next-label</code>', description: 'Accessibility label for the next page link.', type: 'String', values: '—', default: '—'}, {name: '<code>aria-previous-label</code>', description: 'Accessibility label for the previous page link.', type: 'String', values: '—', default: '—'}, {name: '<code>aria-page-label</code>', description: 'Accessibility label for the page link. If passed, this text will be prepended to the number of the page.', type: 'String', values: '—', default: '—'}, {name: '<code>aria-current-label</code>', description: 'Accessibility label for the current page link. If passed, this text will be prepended to the current page.', type: 'String', values: '—', default: '—'}], slots: [{name: 'default', description: 'This is to customize numbered pagination buttons with the Button subcomponent.', props: '<code>:page="props.page"</code>'}, {name: 'next', description: 'This is to customize the next pagination button with the Button subcomponent.', props: '<code>:page="props.page"</code>'}, {name: 'previous', description: 'This is to customize the previous pagination button with the Button subcomponent.', props: '<code>:page="props.page"</code>'}], events: [{name: '<code>change</code>', description: 'Triggers when the current page is changed', parameters: '<code>value: Number</code>'}]}, {title: 'Button', props: [{name: '<code>page</code>', description: 'The prop page need to be passed upon the component (<code>:page="props.page"</code>).', type: 'Object', values: '—', default: '—'}, {name: '<code>tag</code>', description: 'Button tag name', type: 'String', values: '<code>a</code>, <code>button</code>, <code>input</code>, <code>router-link</code>, <code>nuxt-link</code> or other nuxt alias', default: '<code>a</code>'}], slots: [{name: 'default', description: '<strong>Required</strong>, pagination button content', props: '-'}]}] }, 434: function (e, n, t) { 'use strict'; Object.defineProperty(n, '__esModule', {value: !0}), n.default = [{name: 'Bulma variables', default: '<a target="_blank" href="https://bulma.io/documentation/components/pagination/#variables">Link</a>'}] }, 435: function (e, n, t) { 'use strict'; Object.defineProperty(n, '__esModule', {value: !0}); var o = t(1826), a = t(1344), r = t(0), i = Object(r.a)(a.a, o.a, o.b, !1, null, null, null); n.default = i.exports }, 436: function (e, n, t) { 'use strict'; Object.defineProperty(n, '__esModule', {value: !0}); var o = t(1828), a = t(1346), r = t(0), i = Object(r.a)(a.a, o.a, o.b, !1, null, null, null); n.default = i.exports }, 599: function (e, n, t) { 'use strict'; Object.defineProperty(n, '__esModule', {value: !0}); var o = t(2444), a = t(2206), r = t(0), i = Object(r.a)(a.a, o.a, o.b, !1, null, null, null); n.default = i.exports }})
